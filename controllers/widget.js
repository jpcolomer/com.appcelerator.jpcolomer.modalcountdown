// Generated by CoffeeScript 1.4.0
(function() {
  var Timer, clockStyleNumber, getMinSecsFromClock, reset, set, setMinSecsClock, start, timer;

  Timer = (function() {

    function Timer() {
      this.isSetted = false;
    }

    Timer.prototype.setTotalSeconds = function() {
      return this.totalSeconds = this.min * 60 + this.sec;
    };

    Timer.prototype.getMinSecsFromTotalSeconds = function() {
      this.min = parseInt(this.totalSeconds / 60);
      return this.sec = parseInt(this.totalSeconds % 60);
    };

    Timer.prototype.tic = function() {
      this.totalSeconds--;
      return this.getMinSecsFromTotalSeconds();
    };

    Timer.prototype.set = function(min, sec) {
      this.min = parseInt(min);
      this.sec = parseInt(sec);
      this.setTotalSeconds();
      this.init_min = this.min;
      this.init_sec = this.sec;
      return this.isSetted = true;
    };

    Timer.prototype.start = function(fn_start, fn_stop) {
      var _this = this;
      return this.intervalId = setInterval(function() {
        if (_this.totalSeconds) {
          _this.tic();
          return fn_start();
        } else {
          _this.stop();
          return fn_stop();
        }
      }, 1000);
    };

    Timer.prototype.stop = function() {
      return clearInterval(this.intervalId);
    };

    Timer.prototype.pause = function() {
      return clearInterval(this.intervalId);
    };

    Timer.prototype.reset = function() {
      return this.set(this.init_min, this.init_sec);
    };

    return Timer;

  })();

  timer = new Timer;

  clockStyleNumber = function(number) {
    number = parseInt(number);
    return number = number < 10 ? "0" + number : number;
  };

  getMinSecsFromClock = function() {
    var min, params, sec, _ref;
    _ref = $.clock.getText().match(/\d\d/g), min = _ref[0], sec = _ref[1];
    return params = {
      min: min,
      sec: sec
    };
  };

  setMinSecsClock = function(min, sec) {
    return $.clock.setText("" + (clockStyleNumber(min)) + ":" + (clockStyleNumber(sec)));
  };

  set = function() {
    var args, timer_picker, timer_picker_view;
    args = getMinSecsFromClock();
    timer_picker = Alloy.createWidget('com.appcelerator.jpcolomer.modalcountdown', 'timer_picker', args);
    timer_picker_view = timer_picker.getView();
    timer_picker.picker.addEventListener('change', function() {
      var min, sec, _ref;
      setMinSecsClock(timer_picker.getMin(), timer_picker.getSec());
      _ref = getMinSecsFromClock(), min = _ref.min, sec = _ref.sec;
      return timer.set(min, sec);
    });
    return timer_picker_view.open();
  };

  start = function() {
    var min, sec, _ref;
    if (!timer.isSetted) {
      _ref = getMinSecsFromClock(), min = _ref.min, sec = _ref.sec;
      timer.set(min, sec);
    }
    $.start.hide();
    $.set.hide();
    $.stop.show();
    $.pause.show();
    return timer.start(function() {
      return setMinSecsClock(timer.min, timer.sec);
    }, function() {
      Ti.Media.vibrate([0, 300, 100, 300]);
      return reset();
    });
  };

  reset = function() {
    timer.reset();
    setMinSecsClock(timer.min, timer.sec);
    $.stop.hide();
    $.set.show();
    $.pause.hide();
    return $.start.show();
  };

  $.set.addEventListener('click', function() {
    return set();
  });

  $.start.addEventListener('click', function() {
    return start();
  });

  $.stop.addEventListener('click', function() {
    timer.stop();
    return reset();
  });

  $.pause.addEventListener('click', function() {
    timer.pause();
    this.hide();
    return $.start.show();
  });

  $.close.addEventListener('click', function() {
    timer.stop();
    return $.win.close();
  });

}).call(this);
